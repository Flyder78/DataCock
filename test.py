import numpy as np
import matplotlib.pyplot as plt
from quadtree import Point, Rect, QuadTree,CUADRADOS
from matplotlib import gridspec
import pandas as pd


def querys(x,y,w,h,color,ax):
    region = Rect(x, y, w, h)
    found_points = []
    qtree.query(region, found_points)
    print('Number of found points =', len(found_points))

    ax.scatter([p.x for p in found_points], [p.y for p in found_points],
                facecolors='none', edgecolors=color, s=32)

    region.draw(ax, c=color)
def cantpuntos(x,y,w,h):
    region = Rect(x, y, w, h)
    found_points = []
    qtree.query(region, found_points)
    return len(found_points)
def esquinas(x,y,w,h):
    a=[x-w/2,y-h/2]
    b=[x+w/2,y+h/2]
    return a,b


DPI = 72
sirven2=[[75.0, 50.0, 150.0, 100.0], [187.5, 25.0, 75.0, 50.0], [262.5, 25.0, 75.0, 50.0], [262.5, 75.0, 75.0, 50.0], [168.75, 62.5, 37.5, 25.0], [206.25, 62.5, 37.5, 25.0], [206.25, 87.5, 37.5, 25.0], [168.75, 87.5, 37.5, 25.0], [168.75, 112.5, 37.5, 25.0], [206.25, 112.5, 37.5, 25.0], [206.25, 137.5, 37.5, 25.0], [168.75, 137.5, 37.5, 25.0], [243.75, 112.5, 37.5, 25.0], [234.375, 106.25, 18.75, 12.5], [253.125, 106.25, 18.75, 12.5], [253.125, 118.75, 18.75, 12.5], [234.375, 118.75, 18.75, 12.5], [281.25, 112.5, 37.5, 25.0], [271.875, 131.25, 18.75, 12.5], [290.625, 131.25, 18.75, 12.5], [285.9375, 128.125, 9.375, 6.25], [295.3125, 128.125, 9.375, 6.25], [295.3125, 134.375, 9.375, 6.25], [285.9375, 134.375, 9.375, 6.25], [290.625, 143.75, 18.75, 12.5], [234.375, 131.25, 18.75, 12.5], [253.125, 131.25, 18.75, 12.5], [253.125, 143.75, 18.75, 12.5], [234.375, 143.75, 18.75, 12.5], [234.375, 156.25, 18.75, 12.5], [253.125, 156.25, 18.75, 12.5], [253.125, 168.75, 18.75, 12.5], [234.375, 168.75, 18.75, 12.5], [271.875, 156.25, 18.75, 12.5], [290.625, 156.25, 18.75, 12.5], [290.625, 168.75, 18.75, 12.5], [271.875, 168.75, 18.75, 12.5], 
[168.75, 162.5, 37.5, 25.0], [159.375, 156.25, 18.75, 12.5], [178.125, 156.25, 18.75, 12.5], [178.125, 168.75, 18.75, 12.5], [159.375, 168.75, 18.75, 12.5], [196.875, 156.25, 18.75, 12.5], [215.625, 156.25, 18.75, 12.5], [215.625, 168.75, 18.75, 12.5], [196.875, 168.75, 18.75, 12.5], [206.25, 187.5, 37.5, 25.0], [75.0, 150.0, 150.0, 100.0], [375.0, 50.0, 150.0, 100.0], [337.5, 
25.0, 75.0, 50.0], [412.5, 25.0, 75.0, 50.0], [412.5, 75.0, 75.0, 50.0], [337.5, 75.0, 75.0, 50.0], [525.0, 50.0, 150.0, 100.0], [525.0, 150.0, 150.0, 100.0], [318.75, 112.5, 37.5, 25.0], [309.375, 106.25, 18.75, 12.5], [328.125, 106.25, 18.75, 12.5], [328.125, 118.75, 18.75, 12.5], [309.375, 118.75, 18.75, 12.5], [356.25, 112.5, 37.5, 25.0], [356.25, 137.5, 37.5, 25.0], [318.75, 137.5, 37.5, 25.0], [412.5, 125.0, 75.0, 50.0], [412.5, 175.0, 75.0, 50.0], [318.75, 162.5, 37.5, 25.0], [356.25, 162.5, 37.5, 25.0], [356.25, 187.5, 37.5, 25.0], [318.75, 187.5, 37.5, 25.0], [318.75, 212.5, 37.5, 25.0], [356.25, 212.5, 37.5, 25.0], [356.25, 237.5, 37.5, 25.0], [318.75, 237.5, 37.5, 25.0], [412.5, 225.0, 75.0, 50.0], [412.5, 275.0, 75.0, 50.0], [318.75, 262.5, 37.5, 25.0], [356.25, 262.5, 37.5, 25.0], [356.25, 287.5, 37.5, 25.0], [525.0, 250.0, 150.0, 100.0], [525.0, 350.0, 150.0, 100.0], [375.0, 350.0, 150.0, 100.0], [37.5, 225.0, 75.0, 50.0], [112.5, 275.0, 75.0, 50.0], [37.5, 275.0, 75.0, 50.0], [168.75, 212.5, 37.5, 25.0], [159.375, 206.25, 18.75, 12.5], [178.125, 206.25, 18.75, 12.5], [178.125, 218.75, 18.75, 12.5], [159.375, 218.75, 18.75, 12.5], [206.25, 212.5, 37.5, 25.0], [206.25, 237.5, 37.5, 25.0], [168.75, 237.5, 37.5, 25.0], [243.75, 212.5, 37.5, 25.0], [234.375, 206.25, 18.75, 12.5], [253.125, 206.25, 18.75, 12.5], [253.125, 218.75, 18.75, 12.5], [234.375, 218.75, 18.75, 12.5], [281.25, 212.5, 37.5, 25.0], [281.25, 237.5, 37.5, 25.0], [243.75, 237.5, 37.5, 25.0], [243.75, 262.5, 37.5, 25.0], [281.25, 262.5, 37.5, 25.0], [281.25, 287.5, 37.5, 25.0], [243.75, 287.5, 37.5, 25.0], [187.5, 275.0, 75.0, 50.0], [225.0, 350.0, 150.0, 100.0], [75.0, 350.0, 150.0, 100.0]]
# '2014/01','2014/02','2014/03','2014/04','2014/05','2014/06','2014/07','2014/08','2014/09','2014/10','2014/11','2014/12',
meses=['2015/01','2015/02','2015/03','2015/04','2015/05','2015/06','2015/07','2015/08','2015/09','2015/10','2015/11','2015/12','2016/01','2016/02','2016/03','2016/04','2016/05','2016/06','2016/07','2016/08','2016/09','2016/10','2016/11','2016/12','2017/01','2017/02','2017/03','2017/04','2017/05','2017/06','2017/07','2017/08','2017/09','2017/10','2017/11','2017/12','2018/01','2018/02','2018/03','2018/04','2018/05','2018/06','2018/07','2018/08','2018/09','2018/10','2018/11','2018/12','2019/01','2019/02','2019/03','2019/04','2019/05','2019/06','2019/07','2019/08','2019/09','2019/10','2019/11','2019/12']
df1=pd.read_csv("./2014-2019.csv",sep=',',low_memory=False)
#get max and min X,Y
maxX=df1['X'].max()
maxY=df1['Y'].max()*-1
minX=df1['X'].min()
minY=df1['Y'].min()*-1
print(maxX,maxY,minX,minY)
cantidad=[]
#get coords in one month
contador=0

df3=df1[df1['Fecha'].str.contains('2019/01')]
df3.reset_index(drop=True, inplace=True)

coords=df3[['X','Y']].values



#reflect coords in y axis
coords[:,1]=coords[:,1]*-1


width, height = 600, 400



#normalize coords
coords[:,0] = (coords[:,0] - minX) / (maxX - minX) * width
coords[:,1] = (coords[:,1] - minY) / (maxY - minY) * height
#rotate coords 180 degrees
coords[:,1] = height - coords[:,1]



points = [Point(*coord) for coord in coords]


domain = Rect(width/2, height/2, width, height)
qtree = QuadTree(domain, 30)

for point in points:
    qtree.insert(point)

print('Number of points in the domain =', len(qtree))


fig = plt.figure(figsize=(700/DPI, 500/DPI), dpi=DPI)
ax = plt.subplot()
ax.set_xlim(0, width)
ax.set_ylim(0, height)
qtree.draw(ax)

ax.scatter([p.x for p in points], [p.y for p in points], s=4)
ax.set_xticks([])
ax.set_yticks([])

# querys(0.00, 0.00, 300.00, 200.00, 'r', ax)

# querys(300.00, 200.00, 600.00, 400.00, 'b', ax)
# querys(j[0], j[1], j[2], j[3], 'g', ax)
# print(len(CUADRADOS))
# sirven=[]
# for i in CUADRADOS:
#     if(cantpuntos(i[0],i[1],i[2],i[3])<=55):
#         sirven2.append(i)
comparar=[]
for i in CUADRADOS:
    primero=esquinas(i[0],i[1],i[2],i[3])
    for j in CUADRADOS:
        segundo=esquinas(j[0],j[1],j[2],j[3])
        if(primero[0][0]<=segundo[0][0] and primero[0][1]<=segundo[0][1] and primero[1][0]>=segundo[1][0] and primero[1][1]>=segundo[1][1]):
            comparados=[i,j]
            comparar.append(comparados)

            


ax.invert_yaxis()
plt.tight_layout()
plt.savefig('./imagenes/'+str(contador)+'.png', DPI=100)
plt.show() 





    

#         #eliminated element in list
#         print(i)
#         CUADRADOS.remove(i)
# print(sirven)
# querys(sirven[0][0],sirven[0][1],sirven[0][2],sirven[0][3],'r',ax)
# for i in sirven2:
#     cantidad.append(cantpuntos(i[0],i[1],i[2],i[3]))
# print(cantidad)



contador=contador+1